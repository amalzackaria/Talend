// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_project.hello_world_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: hello_world Purpose: Test<br>
 * Description: test <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class hello_world implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (User_Name != null) {

				this.setProperty("User_Name", User_Name.toString());

			}

			if (Age != null) {

				this.setProperty("Age", Age.toString());

			}

		}

		public String User_Name;

		public String getUser_Name() {
			return this.User_Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "hello_world";
	private final String projectName = "TEST_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hello_world.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hello_world.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputMSDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputMSDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputMSDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputMSDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class testStruct implements
			routines.system.IPersistableRow<testStruct> {
		final static byte[] commonByteArrayLock_TEST_PROJECT_hello_world = new byte[0];
		static byte[] commonByteArray_TEST_PROJECT_hello_world = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_PROJECT_hello_world) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(testStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputMSDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputMSDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				testStruct test = new testStruct();

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("test" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				int nb_line_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "D:/TOS_DI-20151214_1327-V6.1.1/TOS_DI-20151214_1327-V6.1.1/workspace/out.xls";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(
						fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1
						.getParentFile();
				if (parentFile_tFileOutputExcel_1 != null
						&& !parentFile_tFileOutputExcel_1.exists()) {

					parentFile_tFileOutputExcel_1.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_1)), true,
						workbookSettings_tFileOutputExcel_1);

				writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_1 == null) {
					writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_1
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_1 = new int[0];
				for (int i_tFileOutputExcel_1 = 0; i_tFileOutputExcel_1 < 0; i_tFileOutputExcel_1++) {
					int fitCellViewSize_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
							.getColumnView(i_tFileOutputExcel_1).getSize();
					fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] = fitCellViewSize_tFileOutputExcel_1 / 256;
					if (fitCellViewSize_tFileOutputExcel_1 % 256 != 0) {
						fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tFileInputMSDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputMSDelimited_2", false);
				start_Hash.put("tFileInputMSDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputMSDelimited_2";

				int tos_count_tFileInputMSDelimited_2 = 0;

				int count_test_tFileInputMSDelimited_2 = 0;
				final int lowBound_test_tFileInputMSDelimited_2 = 0;
				final int highBound_test_tFileInputMSDelimited_2 = 2147483647;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputMSDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
						"D:/TOS_DI-20151214_1327-V6.1.1/52WeeksHigh2-14-2017.csv",
						"ISO-8859-15", ",", "\n", true, 0, 0, -1, -1, false);
				String temp_tFileInputMSDelimited_2 = null;
				while (fid_tFileInputMSDelimited_2.nextRecord()) {
					test = null;
					try {
						if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("Security Code")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539661")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531525")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532683")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("519216")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531156")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539523")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532475")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532914")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531560")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("517481")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("507526")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530355")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511144")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532759")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511724")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539399")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539662")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500493")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("514440")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500084")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532456")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524506")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("522001")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523367")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523369")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539197")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("540268")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531306")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500068")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531367")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("538608")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("590080")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524588")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("540153")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526574")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("538708")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500086")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532656")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530079")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("507910")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531191")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("536751")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("536507")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524226")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532155")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("590133")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531881")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500164")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530579")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500166")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532708")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("515147")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532855")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500104")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532636")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532614")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531594")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530979")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526887")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532187")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539807")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("538501")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531337")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526859")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511609")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532189")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("516078")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("504840")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("522287")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532714")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("517569")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530163")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("533519")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531402")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539043")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("521018")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523371")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531146")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532990")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523782")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539219")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532952")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524816")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("502168")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500301")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523630")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526159")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530129")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532698")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500730")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530219")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539291")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526747")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("509084")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539883")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500327")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("507864")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500333")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("540173")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("509077")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("540159")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("514028")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("522281")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500360")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524610")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531952")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("526407")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532092")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("538557")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("590056")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531898")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511076")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("516110")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("539148")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("533019")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("503811")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("540269")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531398")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("513498")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531982")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511539")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("519483")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532262")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("533281")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("522294")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("511559")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("500777")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523419")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531972")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524264")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532035")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("536672")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("523261")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("531695")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("538634")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524212")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("519224")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("524758")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("532648")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("530697")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim()
								.equals("504988")) {
						} else if (fid_tFileInputMSDelimited_2
								.get(Integer.parseInt("0")).trim().equals()) {
							count_test_tFileInputMSDelimited_2++;
							if ((count_test_tFileInputMSDelimited_2 < lowBound_test_tFileInputMSDelimited_2)
									|| (count_test_tFileInputMSDelimited_2 > highBound_test_tFileInputMSDelimited_2)) {
								throw new java.lang.Exception(
										"Data error in file: The cardinality for "
												+ +" is , but we have found "
												+ count_test_tFileInputMSDelimited_2
												+ ".");// thow
														// exception............
							}
							test = new testStruct();
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						test = null;
					}

					/**
					 * [tFileInputMSDelimited_2 begin ] stop
					 */

					/**
					 * [tFileInputMSDelimited_2 main ] start
					 */

					currentComponent = "tFileInputMSDelimited_2";

					tos_count_tFileInputMSDelimited_2++;

					/**
					 * [tFileInputMSDelimited_2 main ] stop
					 */
					// Start of branch "test"
					if (test != null) {

						/**
						 * [tFileOutputExcel_1 main ] start
						 */

						currentComponent = "tFileOutputExcel_1";

						// test
						// test

						if (execStat) {
							runStat.updateStatOnConnection("test" + iterateId,
									1, 1);
						}

						nb_line_tFileOutputExcel_1++;

						tos_count_tFileOutputExcel_1++;

						/**
						 * [tFileOutputExcel_1 main ] stop
						 */

					} // End of branch "test"

					/**
					 * [tFileInputMSDelimited_2 end ] start
					 */

					currentComponent = "tFileInputMSDelimited_2";

				}
				if (fid_tFileInputMSDelimited_2 != null) {
					fid_tFileInputMSDelimited_2.close();
				}

				ok_Hash.put("tFileInputMSDelimited_2", true);
				end_Hash.put("tFileInputMSDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputMSDelimited_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				writeableWorkbook_tFileOutputExcel_1.write();
				writeableWorkbook_tFileOutputExcel_1.close();

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("test" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputMSDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputMSDelimited_2";

				/**
				 * [tFileInputMSDelimited_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputMSDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hello_world hello_worldClass = new hello_world();

		int exitCode = hello_worldClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = hello_world.class.getClassLoader()
					.getResourceAsStream(
							"test_project/hello_world_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.User_Name = (String) context.getProperty("User_Name");
			try {
				context.Age = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("Age"));
			} catch (NumberFormatException e) {
				context.Age = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("User_Name")) {
				context.User_Name = (String) parentContextMap.get("User_Name");
			}
			if (parentContextMap.containsKey("Age")) {
				context.Age = (Integer) parentContextMap.get("Age");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tFileInputMSDelimited_2Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tFileInputMSDelimited_2) {
					globalMap.put("tFileInputMSDelimited_2_SUBPROCESS_STATE",
							-1);

					e_tFileInputMSDelimited_2.printStackTrace();

				} catch (Error e_tFileInputMSDelimited_2) {
					globalMap.put("tFileInputMSDelimited_2_SUBPROCESS_STATE",
							-1);

					e_tFileInputMSDelimited_2.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : hello_world");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 45507 characters generated by Talend Open Studio for Data Integration on the
 * February 14, 2017 7:51:27 PM IST
 ************************************************************************************************/
